{
  "active": false,
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Perplexity Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Post": {
      "main": [
        [
          {
            "node": "Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Perplexity Research": {
      "main": [
        [
          {
            "node": "Message a model",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Message a model": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Save Post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-08-30T11:34:31.511Z",
  "id": "7y6CxGx4P8t8bDxb",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "LinkedIn Posts Writer",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "idea"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        80,
        112
      ],
      "id": "72003e87-0bff-41e4-ac63-e61881f692e5",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "app4ghbOfxn1Gyoax",
          "mode": "list",
          "cachedResultName": "LinkedIn Posts",
          "cachedResultUrl": "https://airtable.com/app4ghbOfxn1Gyoax"
        },
        "table": {
          "__rl": true,
          "value": "tblql7EnMlSqIJqBj",
          "mode": "list",
          "cachedResultName": "Posts",
          "cachedResultUrl": "https://airtable.com/app4ghbOfxn1Gyoax/tblql7EnMlSqIJqBj"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "likesCount": 0,
            "urn": "={{ Math.floor(1e18 + Math.random() * 9e18).toString() }}",
            "content": "=raw idea: {{ $('When Executed by Another Workflow').item.json.idea }}",
            "contentType": "text",
            "status": "review",
            "repurpose": "=Text only:\n{{ $json.message.content.text }}\n\n---\n\nText + Infographic:\n{{ $json.message.content.infographic }}\n\n---\n\nText + Tweet:\n{{ $json.message.content.tweet }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "urn",
              "displayName": "urn",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "datePosted",
              "displayName": "datePosted",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "username",
              "displayName": "username",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "content",
              "displayName": "content",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "likesCount",
              "displayName": "likesCount",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "number",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "contentType",
              "displayName": "contentType",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "text",
                  "value": "text"
                },
                {
                  "name": "image",
                  "value": "image"
                },
                {
                  "name": "video",
                  "value": "video"
                },
                {
                  "name": "document",
                  "value": "document"
                }
              ],
              "readOnly": false,
              "removed": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "repurpose",
              "displayName": "repurpose",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "finalText",
              "displayName": "finalText",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "image",
              "displayName": "image",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "array",
              "readOnly": false,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "options",
              "options": [
                {
                  "name": "review",
                  "value": "review"
                },
                {
                  "name": "ready",
                  "value": "ready"
                },
                {
                  "name": "posted",
                  "value": "posted"
                }
              ],
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        976,
        112
      ],
      "id": "87e8fd22-5f5d-4b61-85d4-0f639f964dc1",
      "name": "Save Post",
      "credentials": {
        "airtableTokenApi": {
          "id": "MzJqjbxy1gDx8wGt",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "464443a2-d5aa-4aa3-bd06-60372337a0e2",
              "name": "content",
              "value": "=Here are the materials for the post:\n{{ $json.fields.repurpose }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1136,
        112
      ],
      "id": "859f0324-3058-4042-a555-d9a4a3916e14",
      "name": "Output"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.perplexity.ai/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer 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"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"sonar\",\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You're a professional content researcher inside the copywriting agency, you know how to search for interesting facts and articles to use in our media.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"We want to write a LinkedIn post about this topic: {{$json.idea}} - Find me 5 interesting, concrete facts/data points that will help us write an amazing post on this topic. Keep your response in less than 700 words.\"\n    }\n  ],\n  \"temperature\": 0.2,\n  \"top_p\": 0.9,\n  \"return_images\": false,\n  \"return_related_questions\": false,\n  \"top_k\": 0,\n  \"stream\": false,\n  \"presence_penalty\": 0,\n  \"frequency_penalty\": 1,\n  \"response_format\": null\n}",
        "options": {}
      },
      "id": "bd38c547-bc12-43e5-a979-555370de013d",
      "name": "Perplexity Research",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        288,
        112
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "content": "# Posts Writer Tool",
        "height": 320,
        "width": 1120
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1,
      "id": "d6bd99e3-7a85-47b6-8caf-b636a7de95c5",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "models/gemini-2.5-pro",
          "mode": "list",
          "cachedResultName": "models/gemini-2.5-pro"
        },
        "messages": {
          "values": [
            {
              "content": "You're a professional content creator for LinkedIn, you've gained a massive 1.000.000 audience by writing deeply valuable business posts.\n\nYour job is to help me write my content. I have a LinkedIn blog about programming and Ai.",
              "role": "model"
            },
            {
              "content": "=\nHere is the raw idea for my next LinkedIn post:\n{{ $json.idea }}\n\nHere are some interesting facts about this topic that we've found on the web:\n{{ $('Perplexity Research').item.json.choices[0].message.content }}\n\n---\n\nYou have to use all this information to write a LinkedIn post in 3 different formats:\n\n1. **Text-only post**\n2. **Text post + image of a tweet with a bold or interesting short text**\n3. **Text + image with infographics/charts** (in this case, describe in detail what should be displayed)\n\nStructure your output as a JSON file:\n{text\": text, \"infographic\": text, \"tweet\": text} this is so importent\n\n**Rule** - Write in the style and structure similar to this post, but focused on programming and AI:\n\n**Text of the post**:\nI used to struggle with coding problems that took days to solve.\nNow, I solve complex algorithms in hours and build innovative AI systems.\n\nHere are 10 habits that transformed my coding journey:\n\n1. **Daily Deep Work**\n   Dedicate the first few hours of your day to uninterrupted coding. No phone, no social media, just you and your code. This is when your mind is sharpest, and you make the most progress.\n\n2. **The AED System**\n   Automate, Eliminate, Delegate.\n   • Automate repetitive code tasks with tools like GitHub Actions and scripts.\n   • Eliminate unnecessary code and dependencies.\n   • Delegate tasks that don’t require your deep expertise.\n\nYour time is precious, use it wisely.\n\n3. **Quarterly Resets**\n   Every quarter, revisit your projects. Reassess what tools, frameworks, or libraries are working and which ones are slowing you down. Make adjustments to stay efficient.\n\n4. **Focus on the 4 W of Programming**\n   Optimize the Who, What, Where, and When of your work:\n   • Who: Collaborate with other top developers.\n   • What: Focus on solving high-impact problems.\n   • Where: Create a distraction-free coding environment.\n   • When: Schedule your deep coding sessions when you're most alert.\n\n5. **Clean Code & Best Practices**\n   Adopt the best practices in programming. Keep your codebase clean, and follow design patterns. The effort you put in today saves you hours in debugging tomorrow.\n\n6. **No Agenda, No Meeting**\n   When collaborating with a team, if the meeting doesn’t have a clear agenda, it doesn’t happen. Period. This eliminates wasted hours and lets you focus on delivering code.\n\n7. **Mornings for Coding**\n   Mornings are for solving complex problems, not meetings. Protect your peak coding hours.\n   Schedule meetings after lunch when your energy dips.\n\n8. **Hell Yes or No**\n   If an idea or task isn’t a \"Hell Yes!\" in terms of importance or learning opportunity, it’s a no. This helps you stay focused on building your most valuable projects.\n\n9. **Time/Energy Audit**\n   Track how you spend your time coding for a week. Categorize tasks as energizing or draining. Then, eliminate the draining tasks. The time audit will supercharge your development career.\n\n10. **Continuous Learning**\n    The tech world moves fast. Learning something new every day – whether it's a new framework, a new AI model, or a new coding practice – keeps you ahead of the curve.\n\n---\n\nEnjoy this? ♻️ Repost it to your network and follow for more insights on programming and AI.\n"
            }
          ]
        },
        "jsonOutput": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.googleGemini",
      "typeVersion": 1,
      "position": [
        464,
        112
      ],
      "id": "c9c3b0ed-e725-4f07-a5a8-40642b27becf",
      "name": "Message a model",
      "credentials": {
        "googlePalmApi": {
          "id": "pJFBBxv3FClxiEmD",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// n8n Code Node to parse LinkedIn post JSON and separate formats\n// Place this node between your AI response and the Airtable node\n\n// Get the input data from the previous node\nconst inputData = $input.all();\n\n// Process each item in the input\nconst outputData = [];\n\nfor (const item of inputData) {\n  try {\n    // Get the AI response content based on your actual data structure\n    let aiResponse;\n    \n    // Check for the structure you're using: content.parts[0].text\n    if (item.json.content?.parts?.[0]?.text) {\n      aiResponse = item.json.content.parts[0].text;\n    }\n    // Fallback to other possible structures\n    else if (item.json.message?.content) {\n      aiResponse = item.json.message.content;\n    }\n    else if (item.json.content) {\n      aiResponse = item.json.content;\n    }\n    else if (item.json.choices?.[0]?.message?.content) {\n      aiResponse = item.json.choices[0].message.content;\n    }\n    else {\n      throw new Error('Could not find AI response content in expected locations');\n    }\n    \n    // If the response is still nested, try to find the actual content\n    if (typeof aiResponse === 'object') {\n      aiResponse = JSON.stringify(aiResponse);\n    }\n    \n    // Extract JSON from the response if it's wrapped in text\n    let jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n    let parsedContent;\n    \n    // Parse the JSON content\n    if (jsonMatch) {\n      // Parse the extracted JSON\n      parsedContent = JSON.parse(jsonMatch[0]);\n    } else {\n      // If no JSON found, try to parse the entire response\n      parsedContent = JSON.parse(aiResponse);\n    }\n    \n    // Validate that we have the expected structure\n    if (!parsedContent || typeof parsedContent !== 'object') {\n      throw new Error('Parsed content is not a valid object');\n    }\n    \n    if (!parsedContent.text && !parsedContent.infographic && !parsedContent.tweet) {\n      throw new Error('Missing required fields: text, infographic, or tweet');\n    }\n    \n    // Create the output item with separated fields\n    const outputItem = {\n      json: {\n        // Keep original data (but remove the large nested content to keep it clean)\n        originalData: {\n          finishReason: item.json.finishReason,\n          index: item.json.index\n        },\n        // Add parsed content in the expected format\n        message: {\n          content: {\n            text: (parsedContent.text || \"\").trim(),\n            infographic: (parsedContent.infographic || \"\").trim(),\n            tweet: (parsedContent.tweet || \"\").trim()\n          }\n        }\n      }\n    };\n    \n    outputData.push(outputItem);\n    \n  } catch (error) {\n    // If parsing fails, create an error item or fallback\n    console.error('Error parsing LinkedIn post content:', error);\n    \n    // Create a fallback structure\n    const fallbackItem = {\n      json: {\n        ...item.json,\n        message: {\n          content: {\n            text: \"Error: Could not parse AI response\",\n            infographic: \"Error: Could not parse AI response\", \n            tweet: \"Error: Could not parse AI response\"\n          }\n        },\n        parseError: error.message\n      }\n    };\n    \n    outputData.push(fallbackItem);\n  }\n}\n\nreturn outputData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        112
      ],
      "id": "adc989db-868d-4961-a4f7-41a5d1be4fbf",
      "name": "Code"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-08-30T11:34:31.545Z",
      "updatedAt": "2025-08-30T11:34:31.545Z",
      "role": "workflow:owner",
      "workflowId": "7y6CxGx4P8t8bDxb",
      "projectId": "oOBE5XeUJ9gPMiIT"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-08-29T21:20:01.634Z",
      "updatedAt": "2025-08-29T21:20:01.634Z",
      "id": "FD4uVehhEiusHALd",
      "name": "linkedin"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-08-30T22:03:54.000Z",
  "versionId": "411b5b27-1bca-4e6c-883f-87d35840057d"
}